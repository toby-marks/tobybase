<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>instrumentation on 👨🏻‍💻 Tobybase</title>
    <link>//tobybase.com/tags/instrumentation/</link>
    <description>Recent content in instrumentation on 👨🏻‍💻 Tobybase</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 22 Feb 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="//tobybase.com/tags/instrumentation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Discovering Command-line Java Profiling Tools</title>
      <link>//tobybase.com/posts/2012-05-02-discovering-command-line-java-profiling-tools/</link>
      <pubDate>Wed, 02 May 2012 21:41:00 +0000</pubDate>
      <guid>//tobybase.com/posts/2012-05-02-discovering-command-line-java-profiling-tools/</guid>
      <description>At my current client I am responsible for administering a third-party Java appplication that unfortunately generates a lot of performance complaints. It&amp;rsquo;s a multi-tiered system with the middle-tier running on Oracle Appication Server 10.1.3. I am already familiar with GUI profiling tools like jconsole and jvisualvm, both of which are included with Oracle&amp;rsquo;s JDK, and I have played around with the profiling capabilities in NetBeans. All of these profiling tools are fairly similar to one another in look and functionality.</description>
    </item>
  </channel>
</rss>
