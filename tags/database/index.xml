<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>database on üë®üèª‚Äçüíª Tobybase</title>
    <link>http://tobybase.com/tags/database/</link>
    <description>Recent content in database on üë®üèª‚Äçüíª Tobybase</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 29 Aug 2022 10:38:47 -0500</lastBuildDate><atom:link href="http://tobybase.com/tags/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Method for extracting tokens from a delimited string in SQL</title>
      <link>http://tobybase.com/posts/extract-tokens-from-delimited-string-in-sql/</link>
      <pubDate>Mon, 29 Aug 2022 10:38:47 -0500</pubDate>
      
      <guid>http://tobybase.com/posts/extract-tokens-from-delimited-string-in-sql/</guid>
      <description>There are several ways to extract tokens from a delimited string in Oracle SQL. The most basic uses the INSTR and SUBSTR functions.
Suppose you wanted to extract the third token from this simple period (.) delimited string: one.two.three.four.five
You could do something like the following.
SELECT SUBSTR( the_string, INSTR(the_string, &amp;#39;.&amp;#39;, 1, 2) + 1, INSTR(the_string, &amp;#39;.&amp;#39;, 1, 3) - INSTR(the_string, &amp;#39;.&amp;#39;, 1, 2) - 1 ) FROM ( SELECT &amp;#39;one.</description>
    </item>
    
    <item>
      <title>How to Pivot a Delimited String of Arbitrary Length to Rows in SQL</title>
      <link>http://tobybase.com/posts/pivot-delimited-string-to-rows/</link>
      <pubDate>Mon, 29 Aug 2022 10:18:55 -0500</pubDate>
      
      <guid>http://tobybase.com/posts/pivot-delimited-string-to-rows/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Table Functions: 9i Feature Worth Revisiting (Part 2)</title>
      <link>http://tobybase.com/posts/2012-04-27-table-functions-9i-feature-worth-revisiting-part-2/</link>
      <pubDate>Fri, 27 Apr 2012 22:35:00 +0000</pubDate>
      
      <guid>http://tobybase.com/posts/2012-04-27-table-functions-9i-feature-worth-revisiting-part-2/</guid>
      <description>In part one of this series I showed a simple example of how table functions can be used to treat PL/SQL collection types as tables in a SQL query. We used a nested table collection type to which we manually added a few entries. In this example, I intend to show a more practical use of table functions using all three PL/SQL collection types: associative arrays, nested tables, and VARRAYs.</description>
    </item>
    
    <item>
      <title>Table Functions: 9i Feature Worth Revisiting (Part 1)</title>
      <link>http://tobybase.com/posts/2012-04-27-table-functions-9i-feature-worth-revisiting-part-1/</link>
      <pubDate>Fri, 27 Apr 2012 22:27:00 +0000</pubDate>
      
      <guid>http://tobybase.com/posts/2012-04-27-table-functions-9i-feature-worth-revisiting-part-1/</guid>
      <description>Yes, they&amp;rsquo;ve been around for a while, but if you haven&amp;rsquo;t made use of table functions lately you might want to reacquaint yourself with this old gem. Table functions allow you to query the contents of PL/SQL collection types using SQL&amp;rsquo;s TABLE operator. Here is a simple example.
CREATE OR REPLACE PACKAGE example AS TYPE nested_table_typ IS TABLE OF VARCHAR2(100); FUNCTION get_nested_table_data RETURN nested_table_typ PIPELINED; END example; / CREATE OR REPLACE PACKAGE BODY example AS FUNCTION get_nested_table_data RETURN nested_table_typ PIPELINED IS BEGIN PIPE ROW (&amp;#39;one&amp;#39;); PIPE ROW (&amp;#39;two&amp;#39;); PIPE ROW (&amp;#39;three&amp;#39;); RETURN; END get_nested_table_data; END example; / The package function example.</description>
    </item>
    
  </channel>
</rss>
