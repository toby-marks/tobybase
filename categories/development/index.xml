<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on üë®üèª‚Äçüíª Tobybase</title>
    <link>http://tobybase.com/categories/development/</link>
    <description>Recent content in Development on üë®üèª‚Äçüíª Tobybase</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 24 Jul 2013 21:42:00 +0000</lastBuildDate>
    
	<atom:link href="http://tobybase.com/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to Use ps to List Top Memory, CPU Eating Processes</title>
      <link>http://tobybase.com/post/2013-07-24-linux-unix-use-ps-to-list-top-memory-cpu-eating-processes/</link>
      <pubDate>Wed, 24 Jul 2013 21:42:00 +0000</pubDate>
      
      <guid>http://tobybase.com/post/2013-07-24-linux-unix-use-ps-to-list-top-memory-cpu-eating-processes/</guid>
      <description>The ps command is a versatile and configurable way to look at the processes running on your system, though I&amp;rsquo;ve generally gotten by with a lazy ps -ef to find out whatever I needed to know. Recently, though, a client&amp;rsquo;s server began running out of memory, and as a number of processes were running on the server, the culprit was not immediately clear. I wanted to provide them with a quick, simple diagnostic tool they could use the next time they received an alert.</description>
    </item>
    
    <item>
      <title>Use Preview to View Formatted man Pages</title>
      <link>http://tobybase.com/links/2013-07-24-view-man-pages/</link>
      <pubDate>Wed, 24 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tobybase.com/links/2013-07-24-view-man-pages/</guid>
      <description>This is an elegant solution for viewing, searching, and archiving man pages that eliminates the necessity for third party apps.
Update: still works in macOS Sierra.</description>
    </item>
    
    <item>
      <title>Use Firebug&#39;s console.debug Command to Analyze Javascript, DOM Objects</title>
      <link>http://tobybase.com/post/2012-10-26-use-firebugs-consoledebug-command-to-analyze-javascript-dom-objects/</link>
      <pubDate>Fri, 26 Oct 2012 21:09:00 +0000</pubDate>
      
      <guid>http://tobybase.com/post/2012-10-26-use-firebugs-consoledebug-command-to-analyze-javascript-dom-objects/</guid>
      <description>Occasionally when debugging my Javascript code I need to be able to analyze the properties of an unknown object; for instance, an unexpected DOM object passed to an event handler. How do you analyze the properties of an object when you don&amp;rsquo;t know what the object is? I was looking for a way to list all the properties of a generic Javascript or DOM object when I stumbled across this blog post by Andrew Peters.</description>
    </item>
    
    <item>
      <title>How To Use a Perl CGI Script to Show Real Web Server Host Name</title>
      <link>http://tobybase.com/post/2012-07-02-use-a-perl-cgi-script-to-show-real-web-server-host-name/</link>
      <pubDate>Mon, 02 Jul 2012 22:40:00 +0000</pubDate>
      
      <guid>http://tobybase.com/post/2012-07-02-use-a-perl-cgi-script-to-show-real-web-server-host-name/</guid>
      <description>Here is a short and simple Perl CGI script that you can use to expose the hostname of your web server, as opposed to just the server/domain portion of the URL string:
#!/usr/bin/perl print &amp;#34;Content-type: text/html\n\n&amp;#34;; print `hostname`; 1; Name the file something like hostname.cgi and place it in your web server&amp;rsquo;s /cgi-bin/ directory, or if your web server is configured appropriately, just name it hostname.pl and drop it wherever you like.</description>
    </item>
    
    <item>
      <title>Let the Database Do the Work</title>
      <link>http://tobybase.com/links/2012-06-01-oracle-row-vs-set-processing/</link>
      <pubDate>Fri, 01 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tobybase.com/links/2012-06-01-oracle-row-vs-set-processing/</guid>
      <description>If you&amp;rsquo;re writing database-driven reports for the web, Craig Shallahamer shows why you should let the (Oracle) database handle as much of your selection and transformation logic as possible.</description>
    </item>
    
    <item>
      <title>Discovering Command-line Java Profiling Tools</title>
      <link>http://tobybase.com/post/2012-05-02-discovering-command-line-java-profiling-tools/</link>
      <pubDate>Wed, 02 May 2012 21:41:00 +0000</pubDate>
      
      <guid>http://tobybase.com/post/2012-05-02-discovering-command-line-java-profiling-tools/</guid>
      <description>At my current client I am responsible for administering a third-party Java appplication that unfortunately generates a lot of performance complaints. It&amp;rsquo;s a multi-tiered system with the middle-tier running on Oracle Appication Server 10.1.3. I am already familiar with GUI profiling tools like jconsole and jvisualvm, both of which are included with Oracle&amp;rsquo;s JDK, and I have played around with the profiling capabilities in NetBeans. All of these profiling tools are fairly similar to one another in look and functionality.</description>
    </item>
    
    <item>
      <title>How To Make Bash Scripts crontab-Compatible</title>
      <link>http://tobybase.com/post/2012-04-05-make-bash-scripts-crontab-compatible/</link>
      <pubDate>Thu, 05 Apr 2012 21:19:05 +0000</pubDate>
      
      <guid>http://tobybase.com/post/2012-04-05-make-bash-scripts-crontab-compatible/</guid>
      <description>When writing shell scripts in bash, consider whether your script can be automated in a batch scheduler like cron. If you reference any external resources in your script relative to the directory in which it resides, those references may break when running your script through cron.
By default, crontab runs scripts in the user&amp;rsquo;s home directory, as specified in /etc/passwd. For user &amp;ldquo;Tim&amp;rdquo; with home directory /home/tim, a sample crontab might look something like the following:</description>
    </item>
    
    <item>
      <title>Invalidating Toplink Session Cache To Avoid Stale Data</title>
      <link>http://tobybase.com/post/2012-03-09-invalidating-toplink-session-cache-to-avoid-stale-data/</link>
      <pubDate>Fri, 09 Mar 2012 18:42:00 +0000</pubDate>
      
      <guid>http://tobybase.com/post/2012-03-09-invalidating-toplink-session-cache-to-avoid-stale-data/</guid>
      <description>Toplink is a Java framework that maps objects to database tables. It is the reference implementation for the Java Persistence Architecture, or JPA. Developers use Toplink to manage data persistence (storage), queries, and transactions in an Oracle database. By default, Toplink makes use of a special cache called a Session Cache, maintained on the server, which is meant to speed up performance. Queried data is stored in the Session Cache and used in subsequent queries to reduce or eliminate calls to the database.</description>
    </item>
    
  </channel>
</rss>