<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scripting on tobybase</title>
    <link>http://tobybase.com/tags/scripting/index.xml</link>
    <description>Recent content in Scripting on tobybase</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>2015 ~ Toby Marks</copyright>
    <atom:link href="/tags/scripting/index.xml" rel="self" type="application/rss+xml" />
    
      
        
          <item>
            <title>How To Use a Perl CGI Script to Show Real Web Server Host Name</title>
            <link>http://tobybase.com/blog/2012/07/02/how-to-use-a-perl-cgi-script-to-show-real-web-server-host-name/</link>
            <pubDate>Mon, 02 Jul 2012 22:40:00 +0000</pubDate>
            
            <guid>http://tobybase.com/blog/2012/07/02/how-to-use-a-perl-cgi-script-to-show-real-web-server-host-name/</guid>
            <description>&lt;p&gt;Here is a short and simple Perl CGI script that you can use to expose the hostname of your web server, as opposed to just the server/domain portion of the URL string:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #aaaaaa; font-style: italic&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
    
    &lt;span style=&#34;color: #0000aa&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #aa5500&#34;&gt;&amp;quot;Content-type: text/html\n\n&amp;quot;&lt;/span&gt;;
    &lt;span style=&#34;color: #0000aa&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #aa5500&#34;&gt;`hostname`&lt;/span&gt;;
    
    &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Name the file something like &lt;code&gt;hostname.cgi&lt;/code&gt; and place it in your web server&amp;rsquo;s &lt;code&gt;/cgi-bin/&lt;/code&gt; directory, or if your web server is configured appropriately, just name it &lt;code&gt;hostname.pl&lt;/code&gt; and drop it wherever you like.&lt;/p&gt;

&lt;p&gt;The following script can be used to dump all the CGI environment variables.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #aaaaaa; font-style: italic&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
    
    &lt;span style=&#34;color: #0000aa&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #aa5500&#34;&gt;&amp;quot;Content-type: text/html\n\n&amp;quot;&lt;/span&gt;;
    &lt;span style=&#34;color: #0000aa&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #aa5500&#34;&gt;&amp;quot;&amp;lt;font size=+1&amp;gt;Environment&amp;lt;/font&amp;gt;\n&amp;quot;&lt;/span&gt;;
    &lt;span style=&#34;color: #0000aa&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color: #00aaaa&#34;&gt;sort&lt;/span&gt; &lt;span style=&#34;color: #00aaaa&#34;&gt;keys&lt;/span&gt; &lt;span style=&#34;color: #aa0000&#34;&gt;%ENV&lt;/span&gt;)
    {
      &lt;span style=&#34;color: #0000aa&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #aa5500&#34;&gt;&amp;quot;&amp;lt;b&amp;gt;$_&amp;lt;/b&amp;gt;: $ENV{$_}&amp;lt;br&amp;gt;\n&amp;quot;&lt;/span&gt;;
    }
    
    &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that this includes &lt;code&gt;SERVER_NAME&lt;/code&gt;, but what that really gives you is the &amp;ldquo;server&amp;rdquo; portion of the URL string. In other words, if your URL is http:&amp;#47;&amp;#47;www.google.com&amp;#47;, then the &lt;code&gt;SERVER_NAME&lt;/code&gt; CGI environment variable would be &amp;ldquo;www.google.com&amp;rdquo;. Fine, but the first script can be used to identify the actual server being called, for example, when your page is hosted on multiple servers load-balanced under a virtual domain name.&lt;/p&gt;

&lt;p&gt;Of course, you could combine the two scripts to give you everything:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #aaaaaa; font-style: italic&#34;&gt;#!/usr/bin/perl&lt;/span&gt;
    
    &lt;span style=&#34;color: #0000aa&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #aa5500&#34;&gt;&amp;quot;Content-type: text/html\n\n&amp;quot;&lt;/span&gt;;
    &lt;span style=&#34;color: #0000aa&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #aa5500&#34;&gt;&amp;quot;&amp;lt;font size=+1&amp;gt;Environment&amp;lt;/font&amp;gt;\n&amp;quot;&lt;/span&gt;;
    &lt;span style=&#34;color: #0000aa&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color: #00aaaa&#34;&gt;sort&lt;/span&gt; &lt;span style=&#34;color: #00aaaa&#34;&gt;keys&lt;/span&gt; &lt;span style=&#34;color: #aa0000&#34;&gt;%ENV&lt;/span&gt;)
    {
      &lt;span style=&#34;color: #0000aa&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #aa5500&#34;&gt;&amp;quot;&amp;lt;b&amp;gt;$_&amp;lt;/b&amp;gt;: $ENV{$_}&amp;lt;br&amp;gt;\n&amp;quot;&lt;/span&gt;;
    }
    
    &lt;span style=&#34;color: #0000aa&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #aa5500&#34;&gt;&amp;quot;&amp;lt;b&amp;gt;REAL SERVER HOSTNAME:&amp;lt;/b&amp;gt; &amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #aa5500&#34;&gt;`hostname`&lt;/span&gt;;
    
    &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>How To Make Bash Scripts crontab-Compatible</title>
            <link>http://tobybase.com/blog/2012/04/05/how-to-make-bash-scripts-crontab-compatible/</link>
            <pubDate>Thu, 05 Apr 2012 21:19:05 +0000</pubDate>
            
            <guid>http://tobybase.com/blog/2012/04/05/how-to-make-bash-scripts-crontab-compatible/</guid>
            <description>&lt;p&gt;When writing shell scripts in bash, consider whether your script can be automated in a batch scheduler like cron. If you reference any external resources in your script relative to the directory in which it resides, those references may break when running your script through cron.&lt;/p&gt;

&lt;p&gt;By default, crontab runs scripts in the user&amp;rsquo;s home directory, as specified in &lt;code&gt;/etc/passwd&lt;/code&gt;. For user &amp;ldquo;Tim&amp;rdquo; with home directory &lt;code&gt;/home/tim&lt;/code&gt;, a sample crontab might look something like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt; * * * runme.sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Every night at midnight, cron will try to run the file &lt;code&gt;/home/tim/runme.sh&lt;/code&gt;. However, if &lt;code&gt;runme.sh&lt;/code&gt; is actually in a sub-directory under &lt;code&gt;~tim&lt;/code&gt;, you will need to tell cron how to reach the file. One option would be to qualify the path in crontab, like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt; * * * ~/bin/runme.sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now cron can find the file. However, if the script makes references to other files inside of &lt;code&gt;/bin&lt;/code&gt; in a path-relative way, those references will be broken.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #aaaaaa; font-style: italic&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;span style=&#34;color: #aaaaaa; font-style: italic&#34;&gt;#runme.sh&lt;/span&gt;
./runthis.sh      &lt;span style=&#34;color: #aaaaaa; font-style: italic&#34;&gt;# can&amp;#39;t find this file when running under cron&lt;/span&gt;
./runthat.sh      &lt;span style=&#34;color: #aaaaaa; font-style: italic&#34;&gt;# can&amp;#39;t find this file when running under cron&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s because to cron &lt;code&gt;./&lt;/code&gt; is not the directory in which the script is running, but rather whatever is defined as the base directory; in the default case, the user&amp;rsquo;s home directory.&lt;/p&gt;

&lt;p&gt;It is possible to specify the base directory in the crontab file itself by defining the special variable &lt;code&gt;HOME&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #aa0000&#34;&gt;HOME&lt;/span&gt;=/home/tim/bin
&lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt; * * * runme.sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, you may not always have control over how your crontab is configured. Perhaps a system administrator is in charge of all the schedules on your server. Or you may organize your scripts in several different directories.&lt;/p&gt;

&lt;p&gt;An easy solution is to start your bash scripts with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #00aaaa&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #0000aa&#34;&gt;$(&lt;/span&gt;dirname &lt;span style=&#34;color: #aa0000&#34;&gt;$0&lt;/span&gt;&lt;span style=&#34;color: #0000aa&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The program &lt;code&gt;dirname&lt;/code&gt; returns the directory portion of the fully qualified path name sent to it. The &lt;code&gt;$0&lt;/code&gt; argument in this context is name of the running script. Basically, this code ensures that the current working directory is the same as the directory in which your script is running. That way all your path-relative references are correct whether running manually or through a scheduler.&lt;/p&gt;
</description>
          </item>
        
      
    
  </channel>
</rss>
